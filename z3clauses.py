import sys
import time
sys.path.append("/home/sukanta/App/z3-master/build")
from z3 import *

s = Optimize()
R_1_1_1, R_1_1_2, R_1_1_3  = Ints('R_1_1_1 R_1_1_2 R_1_1_3')
r_1_1_1, r_1_1_2, r_1_1_3, s_1_1  = Ints('r_1_1_1 r_1_1_2 r_1_1_3 s_1_1')# Added reagent variables
R_2_1_1, R_2_1_2, R_2_1_3  = Ints('R_2_1_1 R_2_1_2 R_2_1_3')
r_2_1_1, r_2_1_2, r_2_1_3, s_2_1  = Ints('r_2_1_1 r_2_1_2 r_2_1_3 s_2_1')# Added reagent variables
R_2_2_1, R_2_2_2, R_2_2_3  = Ints('R_2_2_1 R_2_2_2 R_2_2_3')
r_2_2_1, r_2_2_2, r_2_2_3, s_2_2  = Ints('r_2_2_1 r_2_2_2 r_2_2_3 s_2_2')# Added reagent variables
R_3_1_1, R_3_1_2, R_3_1_3  = Ints('R_3_1_1 R_3_1_2 R_3_1_3')
r_3_1_1, r_3_1_2, r_3_1_3, s_3_1  = Ints('r_3_1_1 r_3_1_2 r_3_1_3 s_3_1')# Added reagent variables
R_3_2_1, R_3_2_2, R_3_2_3  = Ints('R_3_2_1 R_3_2_2 R_3_2_3')
r_3_2_1, r_3_2_2, r_3_2_3, s_3_2  = Ints('r_3_2_1 r_3_2_2 r_3_2_3 s_3_2')# Added reagent variables
R_4_1_1, R_4_1_2, R_4_1_3  = Ints('R_4_1_1 R_4_1_2 R_4_1_3')
r_4_1_1, r_4_1_2, r_4_1_3, s_4_1  = Ints('r_4_1_1 r_4_1_2 r_4_1_3 s_4_1')# Added reagent variables
R_4_2_1, R_4_2_2, R_4_2_3  = Ints('R_4_2_1 R_4_2_2 R_4_2_3')
r_4_2_1, r_4_2_2, r_4_2_3, s_4_2  = Ints('r_4_2_1 r_4_2_2 r_4_2_3 s_4_2')# Added reagent variables
w_2_1_1_1, w_2_2_1_1, w_3_1_2_1, w_3_2_2_2, w_4_1_3_1, w_4_2_3_2  = Ints('w_2_1_1_1 w_2_2_1_1 w_3_1_2_1 w_3_2_2_2 w_4_1_3_1 w_4_2_3_2')# Added edgeVariables

t61 = Int('t61')
t62 = Int('t62')
t63 = Int('t63')
t64 = Int('t64')
t65 = Int('t65')
t66 = Int('t66')
s.add(64*r_1_1_1 + 1*t61 + 1*t62  == R_1_1_1)
s.add(64*r_1_1_2 + 1*t63 + 1*t64  == R_1_1_2)
s.add(64*r_1_1_3 + 1*t65 + 1*t66  == R_1_1_3)

s.add(Implies((w_2_1_1_1 == 0), (t61 == 0)))
s.add(Implies((w_2_1_1_1 == 1), (t61 == 1*R_2_1_1)))
s.add(Implies((w_2_1_1_1 == 2), (t61 == 2*R_2_1_1)))
s.add(Implies((w_2_1_1_1 == 3), (t61 == 3*R_2_1_1)))

s.add(Implies((w_2_2_1_1 == 0), (t62 == 0)))
s.add(Implies((w_2_2_1_1 == 1), (t62 == 1*R_2_2_1)))
s.add(Implies((w_2_2_1_1 == 2), (t62 == 2*R_2_2_1)))
s.add(Implies((w_2_2_1_1 == 3), (t62 == 3*R_2_2_1)))

s.add(Implies((w_2_1_1_1 == 0), (t63 == 0)))
s.add(Implies((w_2_1_1_1 == 1), (t63 == 1*R_2_1_2)))
s.add(Implies((w_2_1_1_1 == 2), (t63 == 2*R_2_1_2)))
s.add(Implies((w_2_1_1_1 == 3), (t63 == 3*R_2_1_2)))

s.add(Implies((w_2_2_1_1 == 0), (t64 == 0)))
s.add(Implies((w_2_2_1_1 == 1), (t64 == 1*R_2_2_2)))
s.add(Implies((w_2_2_1_1 == 2), (t64 == 2*R_2_2_2)))
s.add(Implies((w_2_2_1_1 == 3), (t64 == 3*R_2_2_2)))

s.add(Implies((w_2_1_1_1 == 0), (t65 == 0)))
s.add(Implies((w_2_1_1_1 == 1), (t65 == 1*R_2_1_3)))
s.add(Implies((w_2_1_1_1 == 2), (t65 == 2*R_2_1_3)))
s.add(Implies((w_2_1_1_1 == 3), (t65 == 3*R_2_1_3)))

s.add(Implies((w_2_2_1_1 == 0), (t66 == 0)))
s.add(Implies((w_2_2_1_1 == 1), (t66 == 1*R_2_2_3)))
s.add(Implies((w_2_2_1_1 == 2), (t66 == 2*R_2_2_3)))
s.add(Implies((w_2_2_1_1 == 3), (t66 == 3*R_2_2_3)))

t67 = Int('t67')
t68 = Int('t68')
t69 = Int('t69')
s.add(16*r_2_1_1 + 1*t67  == R_2_1_1)
s.add(16*r_2_1_2 + 1*t68  == R_2_1_2)
s.add(16*r_2_1_3 + 1*t69  == R_2_1_3)

s.add(Implies((w_3_1_2_1 == 0), (t67 == 0)))
s.add(Implies((w_3_1_2_1 == 1), (t67 == 1*R_3_1_1)))
s.add(Implies((w_3_1_2_1 == 2), (t67 == 2*R_3_1_1)))
s.add(Implies((w_3_1_2_1 == 3), (t67 == 3*R_3_1_1)))

s.add(Implies((w_3_1_2_1 == 0), (t68 == 0)))
s.add(Implies((w_3_1_2_1 == 1), (t68 == 1*R_3_1_2)))
s.add(Implies((w_3_1_2_1 == 2), (t68 == 2*R_3_1_2)))
s.add(Implies((w_3_1_2_1 == 3), (t68 == 3*R_3_1_2)))

s.add(Implies((w_3_1_2_1 == 0), (t69 == 0)))
s.add(Implies((w_3_1_2_1 == 1), (t69 == 1*R_3_1_3)))
s.add(Implies((w_3_1_2_1 == 2), (t69 == 2*R_3_1_3)))
s.add(Implies((w_3_1_2_1 == 3), (t69 == 3*R_3_1_3)))

t70 = Int('t70')
t71 = Int('t71')
t72 = Int('t72')
s.add(16*r_2_2_1 + 1*t70  == R_2_2_1)
s.add(16*r_2_2_2 + 1*t71  == R_2_2_2)
s.add(16*r_2_2_3 + 1*t72  == R_2_2_3)

s.add(Implies((w_3_2_2_2 == 0), (t70 == 0)))
s.add(Implies((w_3_2_2_2 == 1), (t70 == 1*R_3_2_1)))
s.add(Implies((w_3_2_2_2 == 2), (t70 == 2*R_3_2_1)))
s.add(Implies((w_3_2_2_2 == 3), (t70 == 3*R_3_2_1)))

s.add(Implies((w_3_2_2_2 == 0), (t71 == 0)))
s.add(Implies((w_3_2_2_2 == 1), (t71 == 1*R_3_2_2)))
s.add(Implies((w_3_2_2_2 == 2), (t71 == 2*R_3_2_2)))
s.add(Implies((w_3_2_2_2 == 3), (t71 == 3*R_3_2_2)))

s.add(Implies((w_3_2_2_2 == 0), (t72 == 0)))
s.add(Implies((w_3_2_2_2 == 1), (t72 == 1*R_3_2_3)))
s.add(Implies((w_3_2_2_2 == 2), (t72 == 2*R_3_2_3)))
s.add(Implies((w_3_2_2_2 == 3), (t72 == 3*R_3_2_3)))

t73 = Int('t73')
t74 = Int('t74')
t75 = Int('t75')
s.add(4*r_3_1_1 + 1*t73  == R_3_1_1)
s.add(4*r_3_1_2 + 1*t74  == R_3_1_2)
s.add(4*r_3_1_3 + 1*t75  == R_3_1_3)

s.add(Implies((w_4_1_3_1 == 0), (t73 == 0)))
s.add(Implies((w_4_1_3_1 == 1), (t73 == 1*R_4_1_1)))
s.add(Implies((w_4_1_3_1 == 2), (t73 == 2*R_4_1_1)))
s.add(Implies((w_4_1_3_1 == 3), (t73 == 3*R_4_1_1)))

s.add(Implies((w_4_1_3_1 == 0), (t74 == 0)))
s.add(Implies((w_4_1_3_1 == 1), (t74 == 1*R_4_1_2)))
s.add(Implies((w_4_1_3_1 == 2), (t74 == 2*R_4_1_2)))
s.add(Implies((w_4_1_3_1 == 3), (t74 == 3*R_4_1_2)))

s.add(Implies((w_4_1_3_1 == 0), (t75 == 0)))
s.add(Implies((w_4_1_3_1 == 1), (t75 == 1*R_4_1_3)))
s.add(Implies((w_4_1_3_1 == 2), (t75 == 2*R_4_1_3)))
s.add(Implies((w_4_1_3_1 == 3), (t75 == 3*R_4_1_3)))

t76 = Int('t76')
t77 = Int('t77')
t78 = Int('t78')
s.add(4*r_3_2_1 + 1*t76  == R_3_2_1)
s.add(4*r_3_2_2 + 1*t77  == R_3_2_2)
s.add(4*r_3_2_3 + 1*t78  == R_3_2_3)

s.add(Implies((w_4_2_3_2 == 0), (t76 == 0)))
s.add(Implies((w_4_2_3_2 == 1), (t76 == 1*R_4_2_1)))
s.add(Implies((w_4_2_3_2 == 2), (t76 == 2*R_4_2_1)))
s.add(Implies((w_4_2_3_2 == 3), (t76 == 3*R_4_2_1)))

s.add(Implies((w_4_2_3_2 == 0), (t77 == 0)))
s.add(Implies((w_4_2_3_2 == 1), (t77 == 1*R_4_2_2)))
s.add(Implies((w_4_2_3_2 == 2), (t77 == 2*R_4_2_2)))
s.add(Implies((w_4_2_3_2 == 3), (t77 == 3*R_4_2_2)))

s.add(Implies((w_4_2_3_2 == 0), (t78 == 0)))
s.add(Implies((w_4_2_3_2 == 1), (t78 == 1*R_4_2_3)))
s.add(Implies((w_4_2_3_2 == 2), (t78 == 2*R_4_2_3)))
s.add(Implies((w_4_2_3_2 == 3), (t78 == 3*R_4_2_3)))

s.add(1*r_4_1_1  == R_4_1_1)
s.add(1*r_4_1_2  == R_4_1_2)
s.add(1*r_4_1_3  == R_4_1_3)

s.add(1*r_4_2_1  == R_4_2_1)
s.add(1*r_4_2_2  == R_4_2_2)
s.add(1*r_4_2_3  == R_4_2_3)

s.add(Or(r_1_1_1 + r_1_1_2 + r_1_1_3 + w_2_1_1_1 + w_2_2_1_1  == 4, r_1_1_1 + r_1_1_2 + r_1_1_3 + w_2_1_1_1 + w_2_2_1_1  == 0))
s.add(Or(r_2_1_1 + r_2_1_2 + r_2_1_3 + w_3_1_2_1  == 4, r_2_1_1 + r_2_1_2 + r_2_1_3 + w_3_1_2_1  == 0))
s.add(w_2_1_1_1  <= 4)
s.add(Or(r_2_2_1 + r_2_2_2 + r_2_2_3 + w_3_2_2_2  == 4, r_2_2_1 + r_2_2_2 + r_2_2_3 + w_3_2_2_2  == 0))
s.add(w_2_2_1_1  <= 4)
s.add(Or(r_3_1_1 + r_3_1_2 + r_3_1_3 + w_4_1_3_1  == 4, r_3_1_1 + r_3_1_2 + r_3_1_3 + w_4_1_3_1  == 0))
s.add(w_3_1_2_1  <= 4)
s.add(Or(r_3_2_1 + r_3_2_2 + r_3_2_3 + w_4_2_3_2  == 4, r_3_2_1 + r_3_2_2 + r_3_2_3 + w_4_2_3_2  == 0))
s.add(w_3_2_2_2  <= 4)
s.add(Or(r_4_1_1 + r_4_1_2 + r_4_1_3  == 4, r_4_1_1 + r_4_1_2 + r_4_1_3  == 0))
s.add(w_4_1_3_1  <= 4)
s.add(Or(r_4_2_1 + r_4_2_2 + r_4_2_3  == 4, r_4_2_1 + r_4_2_2 + r_4_2_3  == 0))
s.add(w_4_2_3_2  <= 4)
s.add(And(r_1_1_1 >= 0, r_1_1_1 <= 3, r_1_1_2 >= 0, r_1_1_2 <= 3, r_1_1_3 >= 0, r_1_1_3 <= 3))
s.add(And(r_2_1_1 >= 0, r_2_1_1 <= 3, r_2_1_2 >= 0, r_2_1_2 <= 3, r_2_1_3 >= 0, r_2_1_3 <= 3))
s.add(And(r_2_2_1 >= 0, r_2_2_1 <= 3, r_2_2_2 >= 0, r_2_2_2 <= 3, r_2_2_3 >= 0, r_2_2_3 <= 3))
s.add(And(r_3_1_1 >= 0, r_3_1_1 <= 3, r_3_1_2 >= 0, r_3_1_2 <= 3, r_3_1_3 >= 0, r_3_1_3 <= 3))
s.add(And(r_3_2_1 >= 0, r_3_2_1 <= 3, r_3_2_2 >= 0, r_3_2_2 <= 3, r_3_2_3 >= 0, r_3_2_3 <= 3))
s.add(And(r_4_1_1 >= 0, r_4_1_1 <= 3, r_4_1_2 >= 0, r_4_1_2 <= 3, r_4_1_3 >= 0, r_4_1_3 <= 3))
s.add(And(r_4_2_1 >= 0, r_4_2_1 <= 3, r_4_2_2 >= 0, r_4_2_2 <= 3, r_4_2_3 >= 0, r_4_2_3 <= 3))
s.add(And(w_2_1_1_1 >= 0, w_2_1_1_1 <= 3, w_2_2_1_1 >= 0, w_2_2_1_1 <= 3, w_3_1_2_1 >= 0, w_3_1_2_1 <= 3, w_3_2_2_2 >= 0, w_3_2_2_2 <= 3, w_4_1_3_1 >= 0, w_4_1_3_1 <= 3, w_4_2_3_2 >= 0, w_4_2_3_2 <= 3))
s.add(And(w_2_1_1_1< 3, w_2_2_1_1< 3)) # Added constraint to limit the edge weight weight

s.add(And(R_1_1_1 == 56, R_1_1_2 == 113, R_1_1_3 == 87))


totalReagents = s.minimize(r_1_1_1 + r_1_1_2 + r_1_1_3 + r_2_1_1 + r_2_1_2 + r_2_1_3 + r_2_2_1 + r_2_2_2 + r_2_2_3 + r_3_1_1 + r_3_1_2 + r_3_1_3 + r_3_2_1 + r_3_2_2 + r_3_2_3 + r_4_1_1 + r_4_1_2 + r_4_1_3 + r_4_2_1 + r_4_2_2 + r_4_2_3 )
startTime = time.time()
if s.check() == sat:
	print("Total reagents = ", totalReagents.value())
	fp = open('z3opFile','w')
	lst = s.model()
	for i in lst:
	    fp.write(str(i) + " = " + str(s.model()[i]) + '\n')
else:
	print('unsat')
endTime = time.time()
executionTime = endTime - startTime
print("Execution Time = ",executionTime)
