import sys
import time
sys.path.append("/home/sukanta/App/z3-master/build")
from z3 import *

s = Optimize()
R_1_1_1, R_1_1_2, R_1_1_3, R_1_1_4  = Ints('R_1_1_1 R_1_1_2 R_1_1_3 R_1_1_4')
r_1_1_1, r_1_1_2, r_1_1_3, r_1_1_4, s_1_1  = Ints('r_1_1_1 r_1_1_2 r_1_1_3 r_1_1_4 s_1_1')# Added reagent variables
R_2_1_1, R_2_1_2, R_2_1_3, R_2_1_4  = Ints('R_2_1_1 R_2_1_2 R_2_1_3 R_2_1_4')
r_2_1_1, r_2_1_2, r_2_1_3, r_2_1_4, s_2_1  = Ints('r_2_1_1 r_2_1_2 r_2_1_3 r_2_1_4 s_2_1')# Added reagent variables
R_2_2_1, R_2_2_2, R_2_2_3, R_2_2_4  = Ints('R_2_2_1 R_2_2_2 R_2_2_3 R_2_2_4')
r_2_2_1, r_2_2_2, r_2_2_3, r_2_2_4, s_2_2  = Ints('r_2_2_1 r_2_2_2 r_2_2_3 r_2_2_4 s_2_2')# Added reagent variables
R_3_1_1, R_3_1_2, R_3_1_3, R_3_1_4  = Ints('R_3_1_1 R_3_1_2 R_3_1_3 R_3_1_4')
r_3_1_1, r_3_1_2, r_3_1_3, r_3_1_4, s_3_1  = Ints('r_3_1_1 r_3_1_2 r_3_1_3 r_3_1_4 s_3_1')# Added reagent variables
R_3_2_1, R_3_2_2, R_3_2_3, R_3_2_4  = Ints('R_3_2_1 R_3_2_2 R_3_2_3 R_3_2_4')
r_3_2_1, r_3_2_2, r_3_2_3, r_3_2_4, s_3_2  = Ints('r_3_2_1 r_3_2_2 r_3_2_3 r_3_2_4 s_3_2')# Added reagent variables
R_4_1_1, R_4_1_2, R_4_1_3, R_4_1_4  = Ints('R_4_1_1 R_4_1_2 R_4_1_3 R_4_1_4')
r_4_1_1, r_4_1_2, r_4_1_3, r_4_1_4, s_4_1  = Ints('r_4_1_1 r_4_1_2 r_4_1_3 r_4_1_4 s_4_1')# Added reagent variables
R_4_2_1, R_4_2_2, R_4_2_3, R_4_2_4  = Ints('R_4_2_1 R_4_2_2 R_4_2_3 R_4_2_4')
r_4_2_1, r_4_2_2, r_4_2_3, r_4_2_4, s_4_2  = Ints('r_4_2_1 r_4_2_2 r_4_2_3 r_4_2_4 s_4_2')# Added reagent variables
w_2_1_1_1, w_2_2_1_1, w_3_1_2_1, w_3_2_2_2, w_4_1_3_1, w_4_2_3_2  = Ints('w_2_1_1_1 w_2_2_1_1 w_3_1_2_1 w_3_2_2_2 w_4_1_3_1 w_4_2_3_2')# Added edgeVariables

t25 = Int('t25')
t26 = Int('t26')
t27 = Int('t27')
t28 = Int('t28')
t29 = Int('t29')
t30 = Int('t30')
t31 = Int('t31')
t32 = Int('t32')
s.add(64*r_1_1_1 + 1*t25 + 1*t26  == R_1_1_1)
s.add(64*r_1_1_2 + 1*t27 + 1*t28  == R_1_1_2)
s.add(64*r_1_1_3 + 1*t29 + 1*t30  == R_1_1_3)
s.add(64*r_1_1_4 + 1*t31 + 1*t32  == R_1_1_4)

s.add(Implies((w_2_1_1_1 == 0), (t25 == 0)))
s.add(Implies((w_2_1_1_1 == 1), (t25 == 1*R_2_1_1)))
s.add(Implies((w_2_1_1_1 == 2), (t25 == 2*R_2_1_1)))
s.add(Implies((w_2_1_1_1 == 3), (t25 == 3*R_2_1_1)))

s.add(Implies((w_2_2_1_1 == 0), (t26 == 0)))
s.add(Implies((w_2_2_1_1 == 1), (t26 == 1*R_2_2_1)))
s.add(Implies((w_2_2_1_1 == 2), (t26 == 2*R_2_2_1)))
s.add(Implies((w_2_2_1_1 == 3), (t26 == 3*R_2_2_1)))

s.add(Implies((w_2_1_1_1 == 0), (t27 == 0)))
s.add(Implies((w_2_1_1_1 == 1), (t27 == 1*R_2_1_2)))
s.add(Implies((w_2_1_1_1 == 2), (t27 == 2*R_2_1_2)))
s.add(Implies((w_2_1_1_1 == 3), (t27 == 3*R_2_1_2)))

s.add(Implies((w_2_2_1_1 == 0), (t28 == 0)))
s.add(Implies((w_2_2_1_1 == 1), (t28 == 1*R_2_2_2)))
s.add(Implies((w_2_2_1_1 == 2), (t28 == 2*R_2_2_2)))
s.add(Implies((w_2_2_1_1 == 3), (t28 == 3*R_2_2_2)))

s.add(Implies((w_2_1_1_1 == 0), (t29 == 0)))
s.add(Implies((w_2_1_1_1 == 1), (t29 == 1*R_2_1_3)))
s.add(Implies((w_2_1_1_1 == 2), (t29 == 2*R_2_1_3)))
s.add(Implies((w_2_1_1_1 == 3), (t29 == 3*R_2_1_3)))

s.add(Implies((w_2_2_1_1 == 0), (t30 == 0)))
s.add(Implies((w_2_2_1_1 == 1), (t30 == 1*R_2_2_3)))
s.add(Implies((w_2_2_1_1 == 2), (t30 == 2*R_2_2_3)))
s.add(Implies((w_2_2_1_1 == 3), (t30 == 3*R_2_2_3)))

s.add(Implies((w_2_1_1_1 == 0), (t31 == 0)))
s.add(Implies((w_2_1_1_1 == 1), (t31 == 1*R_2_1_4)))
s.add(Implies((w_2_1_1_1 == 2), (t31 == 2*R_2_1_4)))
s.add(Implies((w_2_1_1_1 == 3), (t31 == 3*R_2_1_4)))

s.add(Implies((w_2_2_1_1 == 0), (t32 == 0)))
s.add(Implies((w_2_2_1_1 == 1), (t32 == 1*R_2_2_4)))
s.add(Implies((w_2_2_1_1 == 2), (t32 == 2*R_2_2_4)))
s.add(Implies((w_2_2_1_1 == 3), (t32 == 3*R_2_2_4)))

t33 = Int('t33')
t34 = Int('t34')
t35 = Int('t35')
t36 = Int('t36')
s.add(16*r_2_1_1 + 1*t33  == R_2_1_1)
s.add(16*r_2_1_2 + 1*t34  == R_2_1_2)
s.add(16*r_2_1_3 + 1*t35  == R_2_1_3)
s.add(16*r_2_1_4 + 1*t36  == R_2_1_4)

s.add(Implies((w_3_1_2_1 == 0), (t33 == 0)))
s.add(Implies((w_3_1_2_1 == 1), (t33 == 1*R_3_1_1)))
s.add(Implies((w_3_1_2_1 == 2), (t33 == 2*R_3_1_1)))
s.add(Implies((w_3_1_2_1 == 3), (t33 == 3*R_3_1_1)))

s.add(Implies((w_3_1_2_1 == 0), (t34 == 0)))
s.add(Implies((w_3_1_2_1 == 1), (t34 == 1*R_3_1_2)))
s.add(Implies((w_3_1_2_1 == 2), (t34 == 2*R_3_1_2)))
s.add(Implies((w_3_1_2_1 == 3), (t34 == 3*R_3_1_2)))

s.add(Implies((w_3_1_2_1 == 0), (t35 == 0)))
s.add(Implies((w_3_1_2_1 == 1), (t35 == 1*R_3_1_3)))
s.add(Implies((w_3_1_2_1 == 2), (t35 == 2*R_3_1_3)))
s.add(Implies((w_3_1_2_1 == 3), (t35 == 3*R_3_1_3)))

s.add(Implies((w_3_1_2_1 == 0), (t36 == 0)))
s.add(Implies((w_3_1_2_1 == 1), (t36 == 1*R_3_1_4)))
s.add(Implies((w_3_1_2_1 == 2), (t36 == 2*R_3_1_4)))
s.add(Implies((w_3_1_2_1 == 3), (t36 == 3*R_3_1_4)))

t37 = Int('t37')
t38 = Int('t38')
t39 = Int('t39')
t40 = Int('t40')
s.add(16*r_2_2_1 + 1*t37  == R_2_2_1)
s.add(16*r_2_2_2 + 1*t38  == R_2_2_2)
s.add(16*r_2_2_3 + 1*t39  == R_2_2_3)
s.add(16*r_2_2_4 + 1*t40  == R_2_2_4)

s.add(Implies((w_3_2_2_2 == 0), (t37 == 0)))
s.add(Implies((w_3_2_2_2 == 1), (t37 == 1*R_3_2_1)))
s.add(Implies((w_3_2_2_2 == 2), (t37 == 2*R_3_2_1)))
s.add(Implies((w_3_2_2_2 == 3), (t37 == 3*R_3_2_1)))

s.add(Implies((w_3_2_2_2 == 0), (t38 == 0)))
s.add(Implies((w_3_2_2_2 == 1), (t38 == 1*R_3_2_2)))
s.add(Implies((w_3_2_2_2 == 2), (t38 == 2*R_3_2_2)))
s.add(Implies((w_3_2_2_2 == 3), (t38 == 3*R_3_2_2)))

s.add(Implies((w_3_2_2_2 == 0), (t39 == 0)))
s.add(Implies((w_3_2_2_2 == 1), (t39 == 1*R_3_2_3)))
s.add(Implies((w_3_2_2_2 == 2), (t39 == 2*R_3_2_3)))
s.add(Implies((w_3_2_2_2 == 3), (t39 == 3*R_3_2_3)))

s.add(Implies((w_3_2_2_2 == 0), (t40 == 0)))
s.add(Implies((w_3_2_2_2 == 1), (t40 == 1*R_3_2_4)))
s.add(Implies((w_3_2_2_2 == 2), (t40 == 2*R_3_2_4)))
s.add(Implies((w_3_2_2_2 == 3), (t40 == 3*R_3_2_4)))

t41 = Int('t41')
t42 = Int('t42')
t43 = Int('t43')
t44 = Int('t44')
s.add(4*r_3_1_1 + 1*t41  == R_3_1_1)
s.add(4*r_3_1_2 + 1*t42  == R_3_1_2)
s.add(4*r_3_1_3 + 1*t43  == R_3_1_3)
s.add(4*r_3_1_4 + 1*t44  == R_3_1_4)

s.add(Implies((w_4_1_3_1 == 0), (t41 == 0)))
s.add(Implies((w_4_1_3_1 == 1), (t41 == 1*R_4_1_1)))
s.add(Implies((w_4_1_3_1 == 2), (t41 == 2*R_4_1_1)))
s.add(Implies((w_4_1_3_1 == 3), (t41 == 3*R_4_1_1)))

s.add(Implies((w_4_1_3_1 == 0), (t42 == 0)))
s.add(Implies((w_4_1_3_1 == 1), (t42 == 1*R_4_1_2)))
s.add(Implies((w_4_1_3_1 == 2), (t42 == 2*R_4_1_2)))
s.add(Implies((w_4_1_3_1 == 3), (t42 == 3*R_4_1_2)))

s.add(Implies((w_4_1_3_1 == 0), (t43 == 0)))
s.add(Implies((w_4_1_3_1 == 1), (t43 == 1*R_4_1_3)))
s.add(Implies((w_4_1_3_1 == 2), (t43 == 2*R_4_1_3)))
s.add(Implies((w_4_1_3_1 == 3), (t43 == 3*R_4_1_3)))

s.add(Implies((w_4_1_3_1 == 0), (t44 == 0)))
s.add(Implies((w_4_1_3_1 == 1), (t44 == 1*R_4_1_4)))
s.add(Implies((w_4_1_3_1 == 2), (t44 == 2*R_4_1_4)))
s.add(Implies((w_4_1_3_1 == 3), (t44 == 3*R_4_1_4)))

t45 = Int('t45')
t46 = Int('t46')
t47 = Int('t47')
t48 = Int('t48')
s.add(4*r_3_2_1 + 1*t45  == R_3_2_1)
s.add(4*r_3_2_2 + 1*t46  == R_3_2_2)
s.add(4*r_3_2_3 + 1*t47  == R_3_2_3)
s.add(4*r_3_2_4 + 1*t48  == R_3_2_4)

s.add(Implies((w_4_2_3_2 == 0), (t45 == 0)))
s.add(Implies((w_4_2_3_2 == 1), (t45 == 1*R_4_2_1)))
s.add(Implies((w_4_2_3_2 == 2), (t45 == 2*R_4_2_1)))
s.add(Implies((w_4_2_3_2 == 3), (t45 == 3*R_4_2_1)))

s.add(Implies((w_4_2_3_2 == 0), (t46 == 0)))
s.add(Implies((w_4_2_3_2 == 1), (t46 == 1*R_4_2_2)))
s.add(Implies((w_4_2_3_2 == 2), (t46 == 2*R_4_2_2)))
s.add(Implies((w_4_2_3_2 == 3), (t46 == 3*R_4_2_2)))

s.add(Implies((w_4_2_3_2 == 0), (t47 == 0)))
s.add(Implies((w_4_2_3_2 == 1), (t47 == 1*R_4_2_3)))
s.add(Implies((w_4_2_3_2 == 2), (t47 == 2*R_4_2_3)))
s.add(Implies((w_4_2_3_2 == 3), (t47 == 3*R_4_2_3)))

s.add(Implies((w_4_2_3_2 == 0), (t48 == 0)))
s.add(Implies((w_4_2_3_2 == 1), (t48 == 1*R_4_2_4)))
s.add(Implies((w_4_2_3_2 == 2), (t48 == 2*R_4_2_4)))
s.add(Implies((w_4_2_3_2 == 3), (t48 == 3*R_4_2_4)))

s.add(1*r_4_1_1  == R_4_1_1)
s.add(1*r_4_1_2  == R_4_1_2)
s.add(1*r_4_1_3  == R_4_1_3)
s.add(1*r_4_1_4  == R_4_1_4)

s.add(1*r_4_2_1  == R_4_2_1)
s.add(1*r_4_2_2  == R_4_2_2)
s.add(1*r_4_2_3  == R_4_2_3)
s.add(1*r_4_2_4  == R_4_2_4)

s.add(Or(r_1_1_1 + r_1_1_2 + r_1_1_3 + r_1_1_4 + w_2_1_1_1 + w_2_2_1_1  == 4, r_1_1_1 + r_1_1_2 + r_1_1_3 + r_1_1_4 + w_2_1_1_1 + w_2_2_1_1  == 0))
s.add(Or(r_2_1_1 + r_2_1_2 + r_2_1_3 + r_2_1_4 + w_3_1_2_1  == 4, r_2_1_1 + r_2_1_2 + r_2_1_3 + r_2_1_4 + w_3_1_2_1  == 0))
s.add(w_2_1_1_1  <= 4)
s.add(Or(r_2_2_1 + r_2_2_2 + r_2_2_3 + r_2_2_4 + w_3_2_2_2  == 4, r_2_2_1 + r_2_2_2 + r_2_2_3 + r_2_2_4 + w_3_2_2_2  == 0))
s.add(w_2_2_1_1  <= 4)
s.add(Or(r_3_1_1 + r_3_1_2 + r_3_1_3 + r_3_1_4 + w_4_1_3_1  == 4, r_3_1_1 + r_3_1_2 + r_3_1_3 + r_3_1_4 + w_4_1_3_1  == 0))
s.add(w_3_1_2_1  <= 4)
s.add(Or(r_3_2_1 + r_3_2_2 + r_3_2_3 + r_3_2_4 + w_4_2_3_2  == 4, r_3_2_1 + r_3_2_2 + r_3_2_3 + r_3_2_4 + w_4_2_3_2  == 0))
s.add(w_3_2_2_2  <= 4)
s.add(Or(r_4_1_1 + r_4_1_2 + r_4_1_3 + r_4_1_4  == 4, r_4_1_1 + r_4_1_2 + r_4_1_3 + r_4_1_4  == 0))
s.add(w_4_1_3_1  <= 4)
s.add(Or(r_4_2_1 + r_4_2_2 + r_4_2_3 + r_4_2_4  == 4, r_4_2_1 + r_4_2_2 + r_4_2_3 + r_4_2_4  == 0))
s.add(w_4_2_3_2  <= 4)
s.add(And(r_1_1_1 >= 0, r_1_1_1 <= 3, r_1_1_2 >= 0, r_1_1_2 <= 3, r_1_1_3 >= 0, r_1_1_3 <= 3, r_1_1_4 >= 0, r_1_1_4 <= 3))
s.add(And(r_2_1_1 >= 0, r_2_1_1 <= 3, r_2_1_2 >= 0, r_2_1_2 <= 3, r_2_1_3 >= 0, r_2_1_3 <= 3, r_2_1_4 >= 0, r_2_1_4 <= 3))
s.add(And(r_2_2_1 >= 0, r_2_2_1 <= 3, r_2_2_2 >= 0, r_2_2_2 <= 3, r_2_2_3 >= 0, r_2_2_3 <= 3, r_2_2_4 >= 0, r_2_2_4 <= 3))
s.add(And(r_3_1_1 >= 0, r_3_1_1 <= 3, r_3_1_2 >= 0, r_3_1_2 <= 3, r_3_1_3 >= 0, r_3_1_3 <= 3, r_3_1_4 >= 0, r_3_1_4 <= 3))
s.add(And(r_3_2_1 >= 0, r_3_2_1 <= 3, r_3_2_2 >= 0, r_3_2_2 <= 3, r_3_2_3 >= 0, r_3_2_3 <= 3, r_3_2_4 >= 0, r_3_2_4 <= 3))
s.add(And(r_4_1_1 >= 0, r_4_1_1 <= 3, r_4_1_2 >= 0, r_4_1_2 <= 3, r_4_1_3 >= 0, r_4_1_3 <= 3, r_4_1_4 >= 0, r_4_1_4 <= 3))
s.add(And(r_4_2_1 >= 0, r_4_2_1 <= 3, r_4_2_2 >= 0, r_4_2_2 <= 3, r_4_2_3 >= 0, r_4_2_3 <= 3, r_4_2_4 >= 0, r_4_2_4 <= 3))
s.add(And(w_2_1_1_1 >= 0, w_2_1_1_1 <= 3, w_2_2_1_1 >= 0, w_2_2_1_1 <= 3, w_3_1_2_1 >= 0, w_3_1_2_1 <= 3, w_3_2_2_2 >= 0, w_3_2_2_2 <= 3, w_4_1_3_1 >= 0, w_4_1_3_1 <= 3, w_4_2_3_2 >= 0, w_4_2_3_2 <= 3))
s.add(And(w_2_1_1_1< 3, w_2_2_1_1< 3)) # Added constraint to limit the edge weight weight

s.add(And(R_1_1_1 == 128, R_1_1_2 == 46, R_1_1_3 == 23, R_1_1_4 == 59))


totalReagents = s.minimize(r_1_1_1 + r_1_1_2 + r_1_1_3 + r_1_1_4 + r_2_1_1 + r_2_1_2 + r_2_1_3 + r_2_1_4 + r_2_2_1 + r_2_2_2 + r_2_2_3 + r_2_2_4 + r_3_1_1 + r_3_1_2 + r_3_1_3 + r_3_1_4 + r_3_2_1 + r_3_2_2 + r_3_2_3 + r_3_2_4 + r_4_1_1 + r_4_1_2 + r_4_1_3 + r_4_1_4 + r_4_2_1 + r_4_2_2 + r_4_2_3 + r_4_2_4 )
startTime = time.time()
if s.check() == sat:
	print("Total reagents = ", totalReagents.value())
	fp = open('z3opFile','w')
	lst = s.model()
	for i in lst:
	    fp.write(str(i) + " = " + str(s.model()[i]) + '\n')
else:
	print('unsat')
endTime = time.time()
executionTime = endTime - startTime
print("Execution Time = ",executionTime)
